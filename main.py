import sys
import os
import math
from service import *

log_path = "./log2.txt"
config_path = "./config.txt"
output_path = "./output"
baro_flag = False
template = [0,0,0.3,1,1,1,1,1,1,1,0.1,-0.2,-0.2,-0.1] #template used for finding start loc

if not os.path.exists(output_path):
    os.makedirs(output_path)
    print(f"[V] created output folder->{output_path}")
try:
    if sys.argv[1][0] == "-":
        log_path = sys.argv[1][1:]
        print(f"[!] Using path -> {log_path}") 
except Exception:
    print("[!] Using default log path -> log.txt")
    

f = open(log_path)
data_format = []
data = []
resolution = 0
temp = 0

try:
    conf = open(config_path)
    for i in conf.readlines():
        if i[0] == "#":
            continue
        elif ";" in i:
            data_format = i.split(";")
            data_format[-1] = data_format[-1][:-1]
            for i in range(len(data_format)):
                data.append([])
        elif i[0:10] == "resolution":
            resolution = i[11:-1]
        elif i[0:23] == "acceleration_multiplier":
            acc_mul = float(i[24:]) #acc miultpltr
        elif i[0:10] == "temperatur":
            temp = float(i[12:])
        
    print("[!] format grabbed from here -> ",config_path, data_format)
    print(f"[V] got acceleration multiplier -> {acc_mul}")
    print(f"[V] got resolution -> {resolution}")
    print(f"[V] got temperature -> {temp}")
except:
    print("[!] no config file detected. creating default...")#make cfg file
    file = open("config.txt", "w") 
    file.write("# write telemetry format here. resolution 0..10\nNUMBER;TIME;AX;AY;AZ;GX;GY;GZ\nresolution=10\nacceleration_multiplier=9.8") 
    file.close() 

if "BARO" in data_format:
    baro_flag = True 
    
for i in f.readlines():
    string = i.split(";")
    for k in range(len(data_format)):
        if k == data_format.index("AZ") or k == data_format.index("AY") or k == data_format.index("AX"):
            try:
                data[k].append(float(string[k]) * acc_mul)
            except Exception:
                print("[!] invalid line detected -> ", i)
                data[k].append(-1)
        else:
            try:
                data[k].append(float(string[k]))
            except Exception:
                print("[!] invalid line detected -> ", i)
                data[k].append(-1)

print("[V] data collected!")

#----------------finding start moment-----
s = data[data_format.index("AZ")]
result = []
for i in range(len(s)):
    result.append(s[i] * template[i%len(template)])
start_n = result.index(max(result))
print(f"[V] start detected at {data[data_format.index('TIME')][start_n]} ms")
if len(data[0]) <=100: #check if there is enough data to cutoff
    print("[!] not enough data to cutoff")
    pass
else:
    print(f"[!] {start_n} values had been removed")
    for i in range(len(data_format)):
        data[i] = data[i][start_n - 20:]

#----------------replace -1 values
for i in range(len(data_format)):
    for k in range(len(data[i])):
        left = 0
        right = 0
        it = k
        if data[i][k] == -1:
            left = data[i][k-1]
            while data[i][it] == -1:
                it+=1
            right = data[i][it]
            for j in range(k,it):
                data[i][j] = left + (j-k) * (right- left)/len(range(k,it))
                print(f"[!] replaced {left + (j-k) * (right- left)/len(range(k,it))} in {data[i][0]}")

#-----plotting-
for i in range(len(data_format)):
    if data_format[i] == "TIME" or data_format[i] == "NUMBER":
        continue

    save_plot(data,data_format,data_format[i],10,output_path)

    sys.stdout.write(f"\r\r[.] processed -> {round(i*100/len(data_format),1)} %")
    sys.stdout.flush()
altitude = []
<<<<<<< HEAD
if baro_flag:
   
    for i in range(len(data[data_format.index("BARO")])):
        
=======
if baro_flag:  
    for i in range(len(data[data_format.index("BARO")])):     
>>>>>>> 74fba3d (git test)
        try:
            altitude.append((8.31*temp/9.81)*math.log(data[data_format.index('BARO')][0]/data[data_format.index('BARO')][i]))
        except Exception:
            altitude.append(-1)
                
    save_plot_value(data,altitude,"ALT",output_path)

sys.stdout.write(f"\r\r[V] processing -> 100 %")
sys.stdout.flush()

print("\n[!] Generating report")
report = open(f"./{output_path}/report.txt",'w')

report.write(f"This report was generated by RKDrawer\nFlight time -> {data[data_format.index('TIME')][-1]-data[data_format.index('TIME')][0]} ms\nMax acceleration -> {max(data[data_format.index('AZ')])} m\s^2\nAltitude (approx) -> {round(get_altitude(data,data_format),2)} m")
report.close()

print("[V] report generated")